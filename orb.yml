version: "2.1"
description: |
  Provides convenient access to Cloudify Manager from within CircleCI
  jobs.
display:
  home_url: "https://cloudify.co"
  source_url: "https://github.com/cloudify-cosmo/circleci-orb"
executors:
  default:
    docker:
      - image: cloudifyplatform/cloudify-cli:5.0.5.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
commands:
  init:
    description: |
      Initializes a Cloudify CLI profile.

      Use this Action if your job actually requires a CLI profile; for example - when using the Cloudify CLI
      (`cfy`) directly. `cfyci` commands create a CLI profile automatically.
    steps:
      - run:
          name: Initialize CLI Profile
          command: |
            cfyci init
  create:
    description: |
      Creates an environment by uploading a blueprint, creating a deployment and running the `install` workflow.
    parameters:
      environment-name:
        description: Name of Cloudify environment to create
        type: string
      blueprint:
        description: Path/URL to blueprint (YAML file or archive file)
        type: string
      inputs-file:
        description: Path to YAML/JSON inputs file
        type: string
        default: "-"
      outputs-file:
        description: |
          Path to JSON file to receive the Cloudify environment's outputs
          and capabilities
        type: string
        default: "-"
    steps:
      - run:
          name: Create Cloudify Environment
          command: |
            cfyci create-environment \
              --name << parameters.environment-name >> \
              --blueprint << parameters.blueprint >> \
              --inputs-file << parameters.inputs-file >> \
              --outputs-file << parameters.outputs-file >>
  delete:
    description: |
      Deletes an environment by running the `uninstall` workflow and deleting the
      deployment. Optionally, also deletes the blueprint from which the deployment was created.
    parameters:
      environment-name:
        description: Name of Cloudify environment to delete
        type: string
      delete-blueprint:
        description: |
          If no more deployments exist for the blueprint, then delete the
          blueprint as well
        type: boolean
        default: false
      ignore-failure:
        description: Whether or not to ignore failures during deletion
        type: boolean
        default: false
    steps:
      - run:
          name: Delete Cloudify Environment
          command: |
            cfyci delete-environment \
              --name << parameters.environment-name >> \
              --delete-blueprint << parameters.delete-blueprint >> \
              --ignore-failure << parameters.ignore-failure >>
  get-environment-data:
    description: |
      Retrieves a Cloudify environment's data, into a file.
    parameters:
      environment-name:
        description: Name of Cloudify environment to get data for
        type: string
      outputs-file:
        description: |
          Path to JSON file to receive the Cloudify environment's outputs
          and capabilities
        type: string
        default: "-"
    steps:
      - run:
          name: Get Environment Data
          command: |
            cfyci get-environment-data \
              --name << parameters.environment-name >> \
              --outputs-file << parameters.outputs-file >>
  cli:
    description: |
      Runs a generic Cloudify CLI command.
    parameters:
      command:
        description: Command to run
        type: string
    steps:
      - run:
          name: Run CLI Command
          command: |
            cfyci cli \
              --command "<< parameters.command >>"
  execute-workflow:
    description: |
      Executes a workflow on a Cloudify deployment.
    parameters:
      environment-name:
        description: Name of Cloudify environment to execute workflow on
        type: string
      workflow:
        description: Name of workflow to execute
        type: string
      parameters-file:
        description: Path to YAML/JSON containing workflow parameters
        type: string
    steps:
      - run:
          name: Execute Workflow
          command: |
            cfyci execute-workflow \
              --name << parameters.environment-name >> \
              --workflow << parameters.workflow >> \
              --parameters-file << parameters.parameters-file >>
  install-or-update:
    description: |
      Creates a deployment, or updates an existing one.
    parameters:
      environment-name:
        description: Name of Cloudify environment to create or update
        type: string
      blueprint-id:
        description: |
          ID of blueprint to create the deployment from (if deployment doesn't
          exist yet), or to update the deployment to (if already exists)
        type: string
      delete-old-blueprint:
        description: |
          If true, and the deployment was updated, then delete the old blueprint
          in case no other deployments exist for it
        type: boolean
        default: false
      inputs-file:
        description: Path to YAML/JSON inputs file
        type: string
        default: "-"
      skip-install:
        description: |
          If this is a deployment update, then skip the `install` operations
        type: boolean
        default: false
      skip-uninstall:
        description: |
          If this is a deployment update, then skip the `uninstall` operations
        type: boolean
        default: false
      skip-reinstall:
        description: |
          If this is a deployment update, then skip reinstalling node instances
          that require re-installation
        type: boolean
        default: false
      install-first:
        description: |
          If this is a deployment update, then run `install` operations before
          `uninstall` ones
        type: boolean
        default: false
      outputs-file:
        description: |
          Path to JSON file to receive the Cloudify environment's outputs
          and capabilities
        type: string
        default: "-"
    steps:
      - run:
          name: Install or update deployment
          command: |
            cfyci install-or-update \
              --name << parameters.environment-name >> \
              --blueprint-id << parameters.blueprint-id >> \
              --delete-old-blueprint << parameters.delete-old-blueprint >> \
              --inputs-file << parameters.inputs-file >> \
              --skip-install << parameters.skip-install >> \
              --skip-uninstall << parameters.skip-uninstall >> \
              --skip-reinstall << parameters.skip-reinstall >> \
              --install-first << parameters.install-first >> \
              --outputs-file << parameters.outputs-file >>
  arm:
    description: |
      Creates an Azure ARM environment.
    parameters:
      environment-name:
        description: Name of Cloudify environment to create
        type: string
      resource-group:
        description: Name of resource group to create
        type: string
      template-file:
        description: URL/path to template file
        type: string
      parameters-file:
        description: YAML/JSON file containing template parameters
        type: string
        default: "-"
      location:
        description: Azure location to create resource group in
        type: string
        default: "-"
      outputs-file:
        description: |
          Path to JSON file to receive the Cloudify environment's outputs
          and capabilities
        type: string
        default: "-"
    steps:
      - run:
          name: Create ARM environment
          command: |
            cfyci arm --name << parameters.environment-name >> \
              --resource-group << parameters.resource-group >> \
              --location << parameters.location >> \
              --template-file << parameters.template-file >> \
              --parameters-file << parameters.parameters-file >> \
              --outputs-file << parameters.outputs-file >>
  cfn:
    description: |
      Creates an AWS CloudFormation environment.

      The template can be provided in any of the following ways:

      * Via the `template-url` parameter, containing a URL that points
        to the template. Note that, in this case, the template must reside
        in an S3 bucket.
      * Via a combination of the `bucket-name` and `resource-name` parameters.
      * Via the `template-file` parameter, pointing to a file that contains the
        template body.
    parameters:
      environment-name:
        description: Environment's name.
        type: string
      stack-name:
        description: CloudFormation's stack name.
        type: string
      template-file:
        description: Path to the file containing the template.
        type: string
        default: "-"
      bucket-name:
        description: |
          Name of S3 bucket to get the template from. If specified,
          then "resource-name" must also be specified.
        type: string
        default: "-"
      resource-name:
        description: |
          Name of file, within the bucket specified by `bucket-name`, containing
          the template to be used.
        type: string
        default: "-"
      template-url:
        description: URL of CloudFormation template.
        type: string
        default: "-"
      parameters-file:
        description: YAML/JSON file containing template parameters.
        type: string
        default: "-"
      outputs-file:
        description: Path to generated environment output data.
        type: string
        default: "-"
    steps:
      - run:
          name: Create CloudFormation environment
          command: |
            cfyci cfn --name << parameters.environment-name >> \
              --stack-name << parameters.stack-name >> \
              --template-file << parameters.template-file >> \
              --bucket-name << parameters.bucket-name >> \
              --resource-name << parameters.resource-name >> \
              --template-url << parameters.template-url >> \
              --parameters-file << parameters.parameters-file >> \
              --outputs-file << parameters.outputs-file >>
  terraform:
    description: |
      Creates a Terraform environment.
    parameters:
      environment-name:
        description: Environment's name
        type: string
      module-file:
        description: URL/path to Terraform module archive
        type: string
      variables-file:
        description: YAML/JSON file containing template variables
        type: string
        default: "-"
      environment-file:
        description: YAML/JSON file containing environment variables to pass to the Terraform process
        type: string
        default: "-"
      environment-mapping:
        description: |
          A whitespace-delimited list of strings. For each item:

          * If it is of the form `k=v`, then the value of the environment variable `k` is passed
            as environment variable `v` to Terraform
          * Otherwise, let the value be `x`; then the environment variable `x` is passed as-is
            to Terraform

          This effectively passes environment variables, visible to the CI/CD platform,
          as environment variables to Terraform. Useful, among others, for
          passing Cloud credentials - stored in the CI/CD platform - to Terraform.
        type: string
        default: ""
      outputs-file:
        description: Path to generated environment output data
        type: string
        default: "-"
    steps:
      - run:
          name: Create Terraform environment
          command: |
            cfyci terraform --name << parameters.environment-name >> \
              --module << parameters.module-file >> \
              --variables << parameters.variables-file >> \
              --environment << parameters.environment-file >> \
              --environment-mapping << parameters.environment-mapping >> \
              --outputs-file << parameters.outputs-file >>
  kubernetes:
    description: |
      Creates a Kubernetes environment.
    parameters:
      environment-name:
        description: Environment's name.
        type: string
      gcp-credentials-file:
        description: |
          Path to file containing GCP service account details. This is optional; either
          this or `token-file` must be provided, but not both.
        type: string
        default: "-"
      token:
        description: |
          Kubernetes API token. This is optional; exactly one of [`token`,
          `token-file`, `gcp-credentials-file`] must be provided.
        type: string
        default: "-"
      token-file:
        description: |
          Path to file containing an API token. This is optional; either this
          or `gcp-credentials-file` must be provided, but not both.
        type: string
        default: "-"
      master-host:
        description: Hostname/IP of the main Kubernetes host.
        type: string
      namespace:
        description: Application's namespace.
        type: string
        default: "-"
      app-definition-file:
        description: Path to Kubernetes application definition file.
        type: string
      ca-cert-file:
        description: |
          Path, on Cloudify Manager, of a file to use as a CA trust store when connecting
          to the Kubernetes master host.
        type: string
        default: "-"
      ssl-cert-file:
        description: |
          Path, on Cloudify Manager, of a file to use as a certificate presented to the
          Kubernetes master host upon connection.
        type: string
        default: "-"
      ssl-key-file:
        description: |
          Path, on Cloudify Manager, of the private key file associated with the certificate
          specified by `ssl-cert-file`.
        type: string
        default: "-"
      skip-ssl-verification:
        description: Whether to verify SSL connections.
        type: boolean
        default: false
      other-options-file:
        description: |
          YAML/JSON file containing additional Kubernetes options, to be passed along
          with the namespace.
        type: string
        default: "-"
      validate-status:
        description: |
          Whether to validate the status of the application upon creation.
        type: boolean
        default: false
      allow-node-redefinition:
        description: Whether to allow Kubernetes node redefinition.
        type: boolean
        default: false
      debug:
        description: Whether to generate debug logging of Kubernetes calls.
        type: boolean
        default: false
      outputs-file:
        description: Path to generated environment output data.
        type: string
        default: "-"
    steps:
      - run:
          name: Create Kubernetes environment
          command: |
            cfyci k8s --name << parameters.environment-name >> \
              --gcp-credentials-file << parameters.gcp-credentials-file >> \
              --token << parameters.token >> \
              --token-file << parameters.token-file >> \
              --master-host << parameters.master-host >> \
              --namespace << parameters.namespace >> \
              --app-definition-file << parameters.app-definition-file >> \
              --ca-cert-file << parameters.ca-cert-file >> \
              --ssl-cert-file << parameters.ssl-cert-file >> \
              --ssl-key-file << parameters.ssl-key-file >> \
              --skip-ssl-verification << parameters.skip-ssl-verification >> \
              --other-options-file << parameters.other-options-file >> \
              --validate-status << parameters.validate-status >> \
              --allow-node-redefinition << parameters.allow-node-redefinition >> \
              --debug << parameters.debug >> \
              --outputs-file << parameters.outputs-file >>
