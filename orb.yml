version: "2.1"
description: |
  Provides convenient access to Cloudify Manager from within CircleCI
  jobs.

  Refer to the official product documentation at https://docs.cloudify.co/latest/working_with/integration/
  for information about Cloudify's integration with CI/CD tools, including information that pertains
  to CircleCI.
display:
  home_url: "https://cloudify.co"
  source_url: "https://github.com/cloudify-cosmo/circleci-orb"
executors:
  default:
    docker:
      - image: isaaccfy/cfy-ci:latest
commands:
  init:
    description: |
      Initializes a Cloudify CLI profile.

      Use this Action if your job actually requires a CLI profile; for example - when using the Cloudify CLI
      (`cfy`) directly. `cfyci` commands create a CLI profile automatically.
    steps:
      - run:
          name: Initialize CLI Profile
          command: |
            cfyci init
  create:
    description: |
      Creates an environment by uploading a blueprint, creating a deployment and running the `install` workflow.
    parameters:
      environment_name:
        description: Name of Cloudify environment to create
        type: string
      blueprint:
        description: Path/URL to blueprint (YAML file or archive file)
        type: string
      inputs_file:
        description: Path to YAML/JSON inputs file
        type: string
        default: "-"
      outputs_file:
        description: |
          Path to JSON file to receive the Cloudify environment's outputs
          and capabilities
        type: string
        default: "-"
    steps:
      - run:
          name: Create Cloudify Environment
          command: |
            cfyci create-environment --name << parameters.environment_name >> \
              --blueprint << parameters.blueprint >> \
              --inputs << parameters.inputs_file >> \
              --outputs-file << parameters.outputs_file >>
  delete:
    description: |
      Deletes an environment by running the `uninstall` workflow and deleting the
      deployment. Optionally, also deletes the blueprint from which the deployment was created.
    parameters:
      environment_name:
        description: Name of Cloudify environment to delete
        type: string
      delete_blueprint:
        description: |
          If no more deployments exist for the blueprint, then delete the
          blueprint as well
        type: boolean
        default: false
      ignore_failure:
        description: Whether or not to ignore failures during deletion
        type: boolean
        default: false
    steps:
      - run:
          name: Delete Cloudify Environment
          command: |
            cfyci delete-environment --name << parameters.environment_name >> \
              --delete-blueprint << parameters.delete_blueprint >> \
              --ignore-failure << parameters.ignore_failure >>
  arm:
    description: |
      Creates an Azure ARM environment.
    parameters:
      environment_name:
        description: Name of Cloudify environment to create
        type: string
      resource_group:
        description: Name of resource group to create
        type: string
      template_file:
        description: URL/path to template file
        type: string
      parameters_file:
        description: YAML/JSON file containing template parameters
        type: string
        default: "-"
      location:
        description: Azure location to create resource group in
        type: string
        default: "-"
      outputs_file:
        description: |
          Path to JSON file to receive the Cloudify environment's outputs
          and capabilities
        type: string
        default: "-"
    steps:
      - run:
          name: Create ARM environment
          command: |
            cfyci arm --name << parameters.environment_name >> \
              --resource-group << parameters.resource_group >> \
              --location << parameters.location >> \
              --template-file << parameters.template_file >> \
              --parameters-file << parameters.parameters_file >> \
              --outputs-file << parameters.outputs_file >>
  cfn:
    description: |
      Creates an AWS CloudFormation environment.

      The template can be provided in any of the following ways:

      * Via the `template_url` parameter, containing a URL that points
        to the template. Note that, in this case, the template must reside
        in an S3 bucket.
      * Via a combination of the `bucket_name` and `resource_name` parameters.
      * Via the `template_file` parameter, pointing to a file that contains the
        template body.
    parameters:
      environment_name:
        description: Environment's name.
        type: string
      stack_name:
        description: CloudFormation's stack name.
        type: string
      template_file:
        description: Path to the file containing the template.
        type: string
        default: "-"
      bucket_name:
        description: |
          Name of S3 bucket to get the template from. If specified,
          then "resource_name" must also be specified.
        type: string
        default: "-"
      resource_name:
        description: |
          Name of file, within the bucket specified by `bucket_name`, containing
          the template to be used.
        type: string
        default: "-"
      template_url:
        description: URL of CloudFormation template.
        type: string
        default: "-"
      parameters_file:
        description: YAML/JSON file containing template parameters.
        type: string
        default: "-"
      outputs_file:
        description: Path to generated environment output data.
        type: string
        default: "-"
    steps:
      - run:
          name: Create CloudFormation environment
          command: |
            cfyci cfn --name << parameters.environment_name >> \
              --stack-name << parameters.stack_name >> \
              --template-file << parameters.template_file >> \
              --bucket-name << parameters.bucket_name >> \
              --resource-name << parameters.resource_name >> \
              --template-url << parameters.template_url >> \
              --parameters-file << parameters.parameters_file >> \
              --outputs-file << parameters.outputs_file >>
  terraform:
    description: |
      Creates a Terraform environment.
    parameters:
      environment_name:
        description: Environment's name
        type: string
      module_file:
        description: URL/path to Terraform module archive
        type: string
      variables_file:
        description: YAML/JSON file containing template variables
        type: string
        default: "-"
      environment_file:
        description: YAML/JSON file containing environment variables to pass to the Terraform process
        type: string
        default: "-"
      environment_mapping:
        description: |
          A whitespace-delimited list of strings. For each item:

          * If it is of the form `k=v`, then the value of the environment variable `k` is passed
            as environment variable `v` to Terraform
          * Otherwise, let the value be `x`; then the environment variable `x` is passed as-is
            to Terraform

          This effectively passes environment variables, visible to the CI/CD platform,
          as environment variables to Terraform. Useful, among others, for
          passing Cloud credentials - stored in the CI/CD platform - to Terraform.
        type: string
        default: ""
      outputs_file:
        description: Path to generated environment output data
        type: string
        default: "-"
    steps:
      - run:
          name: Create Terraform environment
          command: |
            cfyci terraform --name << parameters.environment_name >> \
              --module << parameters.module_file >> \
              --variables << parameters.variables_file >> \
              --environment << parameters.environment_file >> \
              --environment-mapping << parameters.environment_mapping >> \
              --outputs-file << parameters.outputs_file >>
  kubernetes:
    description: |
      Creates a Kubernetes environment.
    parameters:
      environment_name:
        description: Environment's name.
        type: string
      gcp_credentials_file:
        description: |
          Path to file containing GCP service account details. This is optional; either
          this or `token_file` must be provided, but not both.
        type: string
        default: "-"
      token:
        description: |
          Kubernetes API token. This is optional; exactly one of [`token`,
          `token_file`, `gcp_credentials_file`] must be provided.
        type: string
        default: "-"
      token_file:
        description: |
          Path to file containing an API token. This is optional; either this
          or `gcp_credentials_file` must be provided, but not both.
        type: string
        default: "-"
      master_host:
        description: Hostname/IP of the main Kubernetes host.
        type: string
      namespace:
        description: Application's namespace.
        type: string
        default: "-"
      app_definition_file:
        description: Path to Kubernetes application definition file.
        type: string
      ca_cert_file:
        description: |
          Path, on Cloudify Manager, of a file to use as a CA trust store when connecting
          to the Kubernetes master host.
        type: string
        default: "-"
      ssl_cert_file:
        description: |
          Path, on Cloudify Manager, of a file to use as a certificate presented to the
          Kubernetes master host upon connection.
        type: string
        default: "-"
      ssl_key_file:
        description: |
          Path, on Cloudify Manager, of the private key file associated with the certificate
          specified by `ssl_cert_file`.
        type: string
        default: "-"
      skip_ssl_verification:
        description: Whether to verify SSL connections.
        type: boolean
        default: false
      other_options_file:
        description: |
          YAML/JSON file containing additional Kubernetes options, to be passed along
          with the namespace.
        type: string
        default: "-"
      validate_status:
        description: |
          Whether to validate the status of the application upon creation.
        type: boolean
        default: false
      allow_node_redefinition:
        description: Whether to allow Kubernetes node redefinition.
        type: boolean
        default: false
      debug:
        description: Whether to generate debug logging of Kubernetes calls.
        type: boolean
        default: false
      outputs_file:
        description: Path to generated environment output data.
        type: string
        default: "-"
    steps:
      - run:
          name: Create Kubernetes environment
          command: |
            cfyci k8s --name << parameters.environment_name >> \
              --gcp-credentials-file << parameters.gcp_credentials_file >> \
              --token << parameters.token >> \
              --token-file << parameters.token_file >> \
              --master-host << parameters.master_host >> \
              --namespace << parameters.namespace >> \
              --app-definition-file << parameters.app_definition_file >> \
              --ca-cert-file << parameters.ca_cert_file >> \
              --ssl-cert-file << parameters.ssl_cert_file >> \
              --ssl-key-file << parameters.ssl_key_file >> \
              --skip-ssl-verification << parameters.skip_ssl_verification >> \
              --other-options-file << parameters.other_options_file >> \
              --validate-status << parameters.validate_status >> \
              --allow-node-redefinition << parameters.allow_node_redefinition >> \
              --debug << parameters.debug >> \
              --outputs-file << parameters.outputs_file >>
